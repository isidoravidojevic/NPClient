package napredno.programiranje.view.form;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

import javafx.util.Pair;
import napredno.programiranje.communication.Communication;
import napredno.programiranje.domain.InvoiceItem;
import napredno.programiranje.domain.Product;
import napredno.programiranje.tablemodel.ProductsTableModel;

public class FrmViewProducts extends JFrame {

	Product product;
    ProductsTableModel productsTableModel = new ProductsTableModel();
    List<Product> products;
    List<Product> searchedProducts;
    String search = "";

    public FrmViewProducts() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        populateTable();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProducts = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prikaz proizvoda");

        btnEdit.setText("Izmeni");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Obriši");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Pretraži proizvode po nazivu:");

        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Proizvodi");

        tblProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblProducts);

        btnRefresh.setText("Osveži");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>                        

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {                                        
        if (tblProducts.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Sistem ne može da učita proizvod. Nije izabran nijedan proizvod. Pokušajte ponovo.", "Greška!", DISPOSE_ON_CLOSE);
        } else {
            product = productsTableModel.get(tblProducts.getSelectedRow());
            JOptionPane.showMessageDialog(this, "Sistem je učitao proizod.", "Učitan proizvod", JOptionPane.INFORMATION_MESSAGE);
            new FrmAddEditProduct(this, rootPaneCheckingEnabled, product, this).setVisible(true);
        }
    }                                       

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if (tblProducts.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Nije izabran nijedan proizvod. Pokušajte ponovo.", "Greška!", DISPOSE_ON_CLOSE);
        } else {
            int number = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite obrisati proizvod?", "Brisanje proizvoda", JOptionPane.YES_NO_OPTION);
            if (number == 0) {
                try {
                    product = productsTableModel.get(tblProducts.getSelectedRow());

                    List<InvoiceItem> invoiceItems = Communication.getInstance().GetAllInvoiceItemsParameter(new Pair<String, String>("invoiceitem.productID", String.valueOf(product.getProductID())));

                    if (invoiceItems.size() == 0) {
                        int deleted = Communication.getInstance().deleteProduct(product);
                        if (deleted > 0) {
                            JOptionPane.showMessageDialog(this, "Sistem je obrisao proizvod.", "Obrisan proizvod", JOptionPane.INFORMATION_MESSAGE);
                            refreshTable();
                            //this.dispose();
                        } else {
                            JOptionPane.showMessageDialog(this, "Sistem ne može da obriše proizvod.", "Greška", JOptionPane.ERROR_MESSAGE);
                        }
                    } else {
                        StringBuilder sb1 = new StringBuilder();

                        for (InvoiceItem invoiceItem : invoiceItems) {
                            sb1.append(invoiceItem.getNumber()).append("-faktura broj ").append(invoiceItem.getInvoice().getInvoiceNumber()).append("; ");
                        }

                        JOptionPane.showMessageDialog(this, "Nije moguće obrisati proizvod jer za njega postoje stavke fakture: " + sb1.toString());
                    }

                } catch (Exception ex) {
                    Logger.getLogger(FrmViewProducts.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }                                         

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
        search = txtSearch.getText().toLowerCase();
        if (!search.isEmpty()) {
            searchProducts();
            if (searchedProducts.size() == 0) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe proizvod po zadatoj vrednosti. Ne postoji proizvod sa tim nazivom!");
            } else if (searchedProducts.size() > 1) {
                tblProducts.setModel(new ProductsTableModel(searchedProducts));
                JOptionPane.showMessageDialog(this, "Sistem je našao proizvode po zadatoj vrednosti. Molimo Vas da odaberete neki od prikazanih proizvoda.");
            } else {
                tblProducts.setModel(new ProductsTableModel(searchedProducts));
                JOptionPane.showMessageDialog(this, "Sistem je našao proizvod po zadatoj vrednosti.");
            }
            tblProducts.getSelectionModel().clearSelection();
            txtSearch.setText("");
        } else {
            searchedProducts = null;
            JOptionPane.showMessageDialog(this, "Pre pretrage unesite karaktere za pretragu.");
        }
    }                                         

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                           
        refreshTable();
        txtSearch.setText("");
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmViewProducts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmViewProducts().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblProducts;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration                   

    private void populateTable() {
        tblProducts.setModel(productsTableModel);
        tblProducts.getColumnModel().getColumn(0).setMinWidth(150);
        tblProducts.getColumnModel().getColumn(3).setMinWidth(150);
        tblProducts.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void refreshTable() {
        productsTableModel = new ProductsTableModel();
        populateTable();
    }

    private void getProducts() {
        try {
            products = Communication.getInstance().getAllProducts();
        } catch (Exception ex) {
            Logger.getLogger(FrmViewProducts.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void searchProducts() {
        getProducts();
        searchedProducts = new ArrayList<>();
        for (Product product : products) {
            if (product.getProductName().toLowerCase().contains(search)) {
                searchedProducts.add(product);
            }
        }

    }

}
