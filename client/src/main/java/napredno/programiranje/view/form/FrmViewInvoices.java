package napredno.programiranje.view.form;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

import napredno.programiranje.communication.Communication;
import napredno.programiranje.domain.Invoice;
import napredno.programiranje.tablemodel.InvoiceTableModel;

public class FrmViewInvoices extends JFrame {

	Invoice invoice;
    InvoiceTableModel invoiceTableModel = new InvoiceTableModel();
    List<Invoice> invoices;
    List<Invoice> searchedInvoices;
    String search = "";

    public FrmViewInvoices() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        populateTable();
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoices = new javax.swing.JTable();
        btnDetails = new javax.swing.JButton();
        btnCancelInvoice = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Prikaz faktura");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Fakture");

        jLabel2.setText("Pretraži fakture po nazivu kupca:");

        btnSearch.setText("Pretraži");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tblInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblInvoices);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
        );

        btnDetails.setText("Detalji");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        btnCancelInvoice.setText("Storniraj");
        btnCancelInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelInvoiceActionPerformed(evt);
            }
        });

        btnRefresh.setText("Osveži");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btnCancelInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(72, 72, 72)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(37, 37, 37)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(82, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnCancelInvoice, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                        .addComponent(btnDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                           
        refreshTable();
        txtSearch.setText("");
    }                                          

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
        search = txtSearch.getText().toLowerCase();
        if (!search.isEmpty()) {
            searchInvoices();
            if (searchedInvoices.size() == 0) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe fakturu po zadatoj vrednosti. Ne postoji faktura sa tim nazivom kupca!");
            } else if (searchedInvoices.size() > 1) {
                tblInvoices.setModel(new InvoiceTableModel(searchedInvoices));
                JOptionPane.showMessageDialog(this, "Sistem je pronašao više rezultata. Molimo Vas da odaberete neku od prikazanih faktura.");
            } else {
                tblInvoices.setModel(new InvoiceTableModel(searchedInvoices));
                JOptionPane.showMessageDialog(this, "Sistem je našao fakturu po zadatoj vrednosti.");
            }
            tblInvoices.getSelectionModel().clearSelection();
            txtSearch.setText("");
        } else {
            searchedInvoices = null;
            JOptionPane.showMessageDialog(this, "Pre pretrage unesite karaktere za pretragu.");
        }
    }                                         

    private void btnCancelInvoiceActionPerformed(java.awt.event.ActionEvent evt) {                                                 
        if (tblInvoices.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Nije izabrana nijedna faktura. Pokušajte ponovo.", "Greška!", DISPOSE_ON_CLOSE);
        } else {
            if (invoiceTableModel.get(tblInvoices.getSelectedRow()).isCanceled()) {
                JOptionPane.showMessageDialog(this, "Sistem ne može da stornira fakturu. Izabrana faktura je već stornirana.", "Greška!", DISPOSE_ON_CLOSE);
                return;
            }
            int number = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite stornirati fakturu?", "Storniranje fakture", JOptionPane.YES_NO_OPTION);
            if (number == 0) {
                try {
                    invoice = invoiceTableModel.get(tblInvoices.getSelectedRow());
                    invoice.setCanceled(true);
                    int canceled = Communication.getInstance().cancelInvoice(invoice);

                    if (canceled > 0) {
                        JOptionPane.showMessageDialog(this, "Sistem je stornirao fakturu.", "Uspešno storniranje", JOptionPane.INFORMATION_MESSAGE);
                        refreshTable();
                    } else {
                        JOptionPane.showMessageDialog(this, "Sistem ne može da stornira fakturu.", "Greška", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (Exception ex) {
                    Logger.getLogger(FrmViewInvoices.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }
    }                                                

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if (tblInvoices.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "Nije izabrana nijedna faktura. Pokušajte ponovo.", "Greška!", DISPOSE_ON_CLOSE);
        } else {
            new FrmDetailInvoice(invoiceTableModel.get(tblInvoices.getSelectedRow())).setVisible(true);
        }
    }                                          

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmViewInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmViewInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmViewInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmViewInvoices.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmViewInvoices().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnCancelInvoice;
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblInvoices;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration                   

    private void populateTable() {
        tblInvoices.setModel(invoiceTableModel);
        tblInvoices.getColumnModel().getColumn(0).setMinWidth(150);
        tblInvoices.getColumnModel().getColumn(3).setMinWidth(150);
        tblInvoices.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public void refreshTable() {
        invoiceTableModel = new InvoiceTableModel();
        populateTable();
    }

    private void getInvoices() {
        try {
            invoices = Communication.getInstance().GetAllInvoices();
        } catch (Exception ex) {
            Logger.getLogger(FrmViewInvoices.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void searchInvoices() {
        getInvoices();
        searchedInvoices = new ArrayList<>();
        for (Invoice invoice : invoices) {
            if (invoice.getCustomer().getCustomerName().toLowerCase().contains(search)) {
                searchedInvoices.add(invoice);
            }
        }

    }
}
