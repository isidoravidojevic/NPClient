package napredno.programiranje.view.form;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

import javafx.util.Pair;
import napredno.programiranje.communication.Communication;
import napredno.programiranje.domain.Customer;
import napredno.programiranje.domain.Invoice;
import napredno.programiranje.tablemodel.CustomersTableModel;

public class FrmViewCustomers extends JFrame {

	 	Customer customer;
	    CustomersTableModel customersTableModel = new CustomersTableModel();
	    List<Customer> customers;
	    List<Customer> searchedCustomers;
	    String search = "";

	    public FrmViewCustomers() {
	        initComponents();
	        setLocationRelativeTo(null);
	        setResizable(false);
	        populateTable();
	        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
	    }

	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        jPanel1 = new javax.swing.JPanel();
	        scroll = new javax.swing.JScrollPane();
	        tblCustomersView = new javax.swing.JTable();
	        btnEditCustomer = new javax.swing.JButton();
	        btnDeleteCustomer = new javax.swing.JButton();
	        jLabel1 = new javax.swing.JLabel();
	        jLabel2 = new javax.swing.JLabel();
	        txtSearch = new javax.swing.JTextField();
	        btnSearch = new javax.swing.JButton();
	        btnRefresh = new javax.swing.JButton();

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
	        setTitle("Prikaz kupaca");

	        tblCustomersView.setModel(new javax.swing.table.DefaultTableModel(
	            new Object [][] {
	                {null, null, null, null},
	                {null, null, null, null},
	                {null, null, null, null},
	                {null, null, null, null}
	            },
	            new String [] {
	                "Title 1", "Title 2", "Title 3", "Title 4"
	            }
	        ));
	        scroll.setViewportView(tblCustomersView);

	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	        jPanel1.setLayout(jPanel1Layout);
	        jPanel1Layout.setHorizontalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 672, Short.MAX_VALUE)
	        );
	        jPanel1Layout.setVerticalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addComponent(scroll, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
	        );

	        btnEditCustomer.setText("Izmeni");
	        btnEditCustomer.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnEditCustomerActionPerformed(evt);
	            }
	        });

	        btnDeleteCustomer.setText("Obriši");
	        btnDeleteCustomer.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnDeleteCustomerActionPerformed(evt);
	            }
	        });

	        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
	        jLabel1.setText("Kupci");

	        jLabel2.setText("Pretraži proizvode po nazivu:");

	        btnSearch.setText("Pretraži");
	        btnSearch.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnSearchActionPerformed(evt);
	            }
	        });

	        btnRefresh.setText("Osveži");
	        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                btnRefreshActionPerformed(evt);
	            }
	        });

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(layout.createSequentialGroup()
	                        .addGap(101, 101, 101)
	                        .addComponent(btnEditCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(56, 56, 56)
	                        .addComponent(btnDeleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(92, 92, 92)
	                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
	                    .addGroup(layout.createSequentialGroup()
	                        .addGap(56, 56, 56)
	                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addGroup(layout.createSequentialGroup()
	                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addGap(18, 18, 18)
	                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
	                .addContainerGap(66, Short.MAX_VALUE))
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(15, 15, 15)
	                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(18, 18, 18)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(jLabel2)
	                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(btnSearch))
	                .addGap(27, 27, 27)
	                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(34, 34, 34)
	                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
	                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                        .addComponent(btnEditCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
	                        .addComponent(btnDeleteCustomer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
	                .addContainerGap(21, Short.MAX_VALUE))
	        );

	        pack();
	    }// </editor-fold>                        

	    private void btnEditCustomerActionPerformed(java.awt.event.ActionEvent evt) {                                                
	        if (tblCustomersView.getSelectedRow() == -1) {
	            JOptionPane.showMessageDialog(this, "Sistem ne moze da ucita kupca. Nije izabran nijedan kupac. Pokušajte ponovo.", "Greška!", DISPOSE_ON_CLOSE);
	        } else {
	            customer = customersTableModel.get(tblCustomersView.getSelectedRow());
	            JOptionPane.showMessageDialog(this, "Sistem je učitao kupca.", "Učitan kupac", JOptionPane.INFORMATION_MESSAGE);
	            new FrmAddEditCustomer(this, rootPaneCheckingEnabled, customer, this).setVisible(true);
	        }
	    }                                               

	    private void btnDeleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {                                                  
	        if (tblCustomersView.getSelectedRow() == -1) {
	            JOptionPane.showMessageDialog(this, "Nije izabran nijedan kupac. Pokušajte ponovo.", "Greška!", DISPOSE_ON_CLOSE);
	        } else {
	            int number = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite obrisati kupca?", "Brisanje proizvoda", JOptionPane.YES_NO_OPTION);
	            if (number == 0) {
	                try {
	                    customer = customersTableModel.get(tblCustomersView.getSelectedRow());
	                    List<Invoice> invoices = Communication.getInstance().GetAllInvoicesParameter(new Pair<String, String>("invoice.customerID", String.valueOf(customer.getCustomerID())));

	                    if (invoices.size() == 0) {
	                        int deleted = Communication.getInstance().deleteCustomer(customer);
	                        if (deleted > 0) {
	                            JOptionPane.showMessageDialog(this, "Sistem je obrisao kupca.", "Obrisan kupac", JOptionPane.INFORMATION_MESSAGE);
	                            refreshTable();
	                            //this.dispose();
	                        } else {
	                            JOptionPane.showMessageDialog(this, "Sistem ne može da obriše kupca.", "Greška", JOptionPane.ERROR_MESSAGE);
	                        }
	                    } else {

	                        StringBuilder sb1 = new StringBuilder();

	                        for (Invoice invoice : invoices) {
	                            sb1.append(invoice.getInvoiceNumber()).append("; ");
	                        }

	                        JOptionPane.showMessageDialog(this, "Nije moguće obrisati kupca, jer za njega postoje fakture sa brojem: " + sb1.toString());
	                    }

	                } catch (Exception ex) {
	                    Logger.getLogger(FrmViewCustomers.class.getName()).log(Level.SEVERE, null, ex);
	                }
	            }
	        }
	    }                                                 

	    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                           
	        refreshTable();
	        txtSearch.setText("");
	    }                                          

	    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {                                          
	        search = txtSearch.getText().toLowerCase();
	        if (!search.isEmpty()) {
	            searchCustomers();
	            if (searchedCustomers.size() == 0) {
	                JOptionPane.showMessageDialog(this, "Sistem ne može da nađe kupca po zadatoj vrednosti. Ne postoji kupac sa tim nazivom!");
	            } else if (searchedCustomers.size() > 1) {
	                tblCustomersView.setModel(new CustomersTableModel(searchedCustomers));
	                JOptionPane.showMessageDialog(this, "Sistem je pronašao više rezultata. Molimo Vas da odaberete neki od prikazanih kupaca.");
	            } else {
	                tblCustomersView.setModel(new CustomersTableModel(searchedCustomers));
	                JOptionPane.showMessageDialog(this, "Sistem je našao kupca po zadatoj vrednosti.");
	            }
	            tblCustomersView.getSelectionModel().clearSelection();
	            txtSearch.setText("");
	        } else {
	            searchedCustomers = null;
	            JOptionPane.showMessageDialog(this, "Pre pretrage unesite karaktere za pretragu.");
	        }
	    }                                         

	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(FrmViewCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(FrmViewCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(FrmViewCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(FrmViewCustomers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>

	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new FrmViewCustomers().setVisible(true);
	            }
	        });
	    }

	    // Variables declaration - do not modify                     
	    private javax.swing.JButton btnDeleteCustomer;
	    private javax.swing.JButton btnEditCustomer;
	    private javax.swing.JButton btnRefresh;
	    private javax.swing.JButton btnSearch;
	    private javax.swing.JLabel jLabel1;
	    private javax.swing.JLabel jLabel2;
	    private javax.swing.JPanel jPanel1;
	    private javax.swing.JScrollPane scroll;
	    private javax.swing.JTable tblCustomersView;
	    private javax.swing.JTextField txtSearch;
	    // End of variables declaration                   

	    private void populateTable() {
	        tblCustomersView.setModel(customersTableModel);
	        tblCustomersView.getColumnModel().getColumn(0).setMinWidth(150);
	        tblCustomersView.getColumnModel().getColumn(3).setMinWidth(150);
	        tblCustomersView.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	    }

	    public void refreshTable() {
	        customersTableModel = new CustomersTableModel();
	        populateTable();
	    }
	    
	    private void getCustomers() {
	        try {
	            customers = Communication.getInstance().getAllCustomers();
	        } catch (Exception ex) {
	            Logger.getLogger(FrmViewCustomers.class.getName()).log(Level.SEVERE, null, ex);
	        }

	    }

	    public void searchCustomers() {
	        getCustomers();
	        searchedCustomers = new ArrayList<>();
	        for (Customer customer : customers) {
	            if (customer.getCustomerName().toLowerCase().contains(search)) {
	                searchedCustomers.add(customer);
	            }
	        }

	    }
}
