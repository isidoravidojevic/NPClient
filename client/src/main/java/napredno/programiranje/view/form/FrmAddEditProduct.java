package napredno.programiranje.view.form;

import java.util.Arrays;
import java.util.List;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import napredno.programiranje.communication.Communication;
import napredno.programiranje.communication.Response;
import napredno.programiranje.domain.MeasurementUnit;
import napredno.programiranje.domain.Producer;
import napredno.programiranje.domain.Product;

public class FrmAddEditProduct extends JDialog {

	Product product;
    List<MeasurementUnit> units = Arrays.asList(MeasurementUnit.values());
    FormMode formMode;
    FrmViewProducts formViewProducts;
    List<Producer> producers;
    
    public FrmAddEditProduct(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        fillCbMeasurementUnit();
        fillCmbProducer();
        setResizable(false);
        btnSaveChanges.setVisible(false);
        formMode = FormMode.FORM_ADD;
    }
    
    

	public FrmAddEditProduct(java.awt.Frame parent, boolean modal, Product product, FrmViewProducts formViewProducts) {
        super(parent, modal);
        initComponents();
        fillCbMeasurementUnit();
        setResizable(false);
        populateEditForm(product);
        this.product = product;
        this.formViewProducts = formViewProducts;
        btnAddProduct.setVisible(false);
        formMode = FormMode.FORM_EDIT;
        btnCancel.setText("Nazad");
        setTitle("Izmena podataka proizvoda");
        jLabel6.setText("Izmenite podatke o proizvodu:");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtProductName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbMeasurementUnit = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtPurchasePrice = new javax.swing.JTextField();
        txtSellingPrice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cmbProducer = new javax.swing.JComboBox<>();
        btnAddProduct = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnSaveChanges = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Kreiranje proizvoda");

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("Ime proizvoda:");

        jLabel2.setText("Količina:");

        jLabel3.setText("Merna jedinica:");

        jLabel4.setText("Nabavna cena:");

        jLabel5.setText("Prodajna cena:");

        jLabel7.setText("Proizvođač:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(79, 79, 79)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtProductName)
                    .addComponent(txtQuantity)
                    .addComponent(cmbMeasurementUnit, 0, 287, Short.MAX_VALUE)
                    .addComponent(txtPurchasePrice)
                    .addComponent(txtSellingPrice)
                    .addComponent(cmbProducer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbMeasurementUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPurchasePrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSellingPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbProducer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        btnAddProduct.setText("Dodaj");
        btnAddProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddProductActionPerformed(evt);
            }
        });

        btnCancel.setText("Poništi");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnSaveChanges.setText("Sačuvaj izmene");
        btnSaveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveChangesActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        jLabel6.setText("Unesite podatke o proizvodu:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(btnSaveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        setSize(new java.awt.Dimension(680, 436));
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {                                          
        switch (formMode) {
            case FORM_ADD:
                txtProductName.setText("");
                txtPurchasePrice.setText("");
                txtSellingPrice.setText("");
                txtQuantity.setText("");
                cmbMeasurementUnit.setSelectedIndex(0);
                break;
            case FORM_EDIT:
                this.dispose();
                break;
            default:
                throw new AssertionError();
        }
    }                                         

    private void btnAddProductActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try{
            String productName = txtProductName.getText();
            String purchasePrice = txtPurchasePrice.getText();
            String sellingPrice = txtSellingPrice.getText();
            String quantity = txtQuantity.getText();
            String producerDb = cmbProducer.getSelectedItem().toString();
            
            validateForm(productName, purchasePrice, sellingPrice, quantity);
            
            Product product = new Product();
            product.setProductName(productName);
            product.setPurchasePrice(Double.parseDouble(purchasePrice));
            product.setSellingPrice(Double.parseDouble(sellingPrice));
            product.setQuantity(Integer.parseInt(quantity));
            product.setMeasurementUnit(cmbMeasurementUnit.getSelectedItem().toString());
            
            producers.forEach(producer -> {
				if(producer.getProducerName().equals(producerDb)) {
					product.setProducer(producer);
				}
			});
            
            Response response = Communication.getInstance().addProduct(product);
            if(response.getException() == null){
                int number = JOptionPane.showConfirmDialog(this, "Uspešno dodat proizvod. Da li želite da dodate još jedan proizvod?", "Dodat proizvod", JOptionPane.YES_NO_OPTION);
                    if (number == 1) {
                        this.dispose();
                    }
                    txtProductName.setText("");
                    txtPurchasePrice.setText("");
                    txtSellingPrice.setText("");
                    txtQuantity.setText("");
                    cmbMeasurementUnit.setSelectedIndex(0);
                    cmbProducer.setSelectedIndex(0);
            }
        } catch (Exception ex){
            JOptionPane.showMessageDialog(this, "Sistem nije kreirao proizvod.\n" + ex.getMessage());
        }
    }                                             

    private void btnSaveChangesActionPerformed(java.awt.event.ActionEvent evt) {                                               
        try{
            String productName = txtProductName.getText();
            String purchasePrice = txtPurchasePrice.getText();
            String sellingPrice = txtSellingPrice.getText();
            String quantity = txtQuantity.getText();
            String producerDb = cmbProducer.getSelectedItem().toString();
            
            validateForm(productName, purchasePrice, sellingPrice, quantity);
            
            product.setProductName(productName);
            product.setPurchasePrice(Double.parseDouble(purchasePrice));
            product.setSellingPrice(Double.parseDouble(sellingPrice));
            product.setQuantity(Integer.parseInt(quantity));
            product.setMeasurementUnit(cmbMeasurementUnit.getSelectedItem().toString());
            
            producers.forEach(producer -> {
				if(producer.getProducerName().equals(producerDb)) {
					product.setProducer(producer);
				}
			});
            
            int number = Communication.getInstance().editProduct(product);
            
            if(number > 0){
                JOptionPane.showMessageDialog(this, "Sistem je azurirao proizvod.", "Uspešna izmena", JOptionPane.INFORMATION_MESSAGE);
                if(formViewProducts != null){
                    formViewProducts.refreshTable();
                }
                this.dispose();
            }
            else{
                JOptionPane.showMessageDialog(this, "Sistem ne može da azurira proizvod.", "Greška", JOptionPane.ERROR_MESSAGE);
            }
            
        } catch (Exception ex){
            JOptionPane.showMessageDialog(this, "Sistem ne moze da azurira proizvod.\n" + ex.getMessage());
        }
    }                                              

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAddEditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAddEditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAddEditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAddEditProduct.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmAddEditProduct dialog = new FrmAddEditProduct(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAddProduct;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSaveChanges;
    private javax.swing.JComboBox cmbMeasurementUnit;
    private javax.swing.JComboBox<String> cmbProducer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtPurchasePrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSellingPrice;
    // End of variables declaration                   

    public JComboBox<String> getCmbMeasurementUnit() {
        return cmbMeasurementUnit;
    }

    public JLabel getjLabel1() {
        return jLabel1;
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public JLabel getjLabel3() {
        return jLabel3;
    }

    public JPanel getjPanel1() {
        return jPanel1;
    }

    public JTextField getTxtProductName() {
        return txtProductName;
    }

    public JTextField getTxtQuantity() {
        return txtQuantity;
    }

    private void fillCbMeasurementUnit() {
        //getCmbMeasurementUnit().removeAllItems();

        units.forEach(unit -> {
            cmbMeasurementUnit.addItem(unit);
        });
        
    }

    private void validateForm(String productName, String purchasePrice, String sellingPrice, String quantity) throws Exception {
        String errorMessage = "";
        if (productName.isEmpty()) {
            errorMessage += "Naziv proizvoda mora biti popunjen!\n";
        }
        if (purchasePrice.isEmpty()) {
            errorMessage += "Nabavna cena mora biti popunjena!\n";
        }
        if (sellingPrice.isEmpty()) {
            errorMessage += "Prodajna cena mora biti popunjena!\n";
        }
        if (quantity.isEmpty()) {
            errorMessage += "Količina mora biti popunjena!\n";
        }
        try {
            double purchasePriceDouble = Double.parseDouble(purchasePrice);
        } catch (NumberFormatException ex){
            errorMessage += "Nabavna cena mora biti broj!\n";
        }
        try {
            double sellingPriceDouble = Double.parseDouble(sellingPrice);
        } catch (NumberFormatException ex){
            errorMessage += "Prodajna cena mora biti broj!\n";
        }
        try {
            int quantityInt = Integer.parseInt(quantity);
        } catch (NumberFormatException ex){
            errorMessage += "Količina mora biti broj!\n";
        }
        if (!errorMessage.isEmpty()) {
            throw new Exception(errorMessage);
        }
    }
    
    private void populateEditForm(Product product){
        txtProductName.setText(product.getProductName());
        txtQuantity.setText(String.valueOf(product.getQuantity()));
        txtPurchasePrice.setText(String.valueOf(product.getPurchasePrice()));
        txtSellingPrice.setText(String.valueOf(product.getSellingPrice()));
        String unitFromDb = product.getMeasurementUnit();
        units.forEach(unit -> {
            if((unit.toString()).equals(unitFromDb)){
                cmbMeasurementUnit.setSelectedItem(unit);
            }
        });
        
        fillCmbProducer();
        String producerDb = product.getProducer().getProducerName();
        producers.forEach(producer -> {
        	if(producer.getProducerName().equals(producerDb)) {
        		cmbProducer.setSelectedItem(producerDb);
        	}
        });
        
    }
    
    private void fillCmbProducer() {
    	try {
    		producers = Communication.getInstance().getAllProducers();
			producers.forEach(producer -> {
				cmbProducer.addItem(producer.getProducerName());
			});
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
}
