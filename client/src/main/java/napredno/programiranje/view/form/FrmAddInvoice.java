package napredno.programiranje.view.form;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

import napredno.programiranje.communication.Communication;
import napredno.programiranje.communication.Response;
import napredno.programiranje.domain.Customer;
import napredno.programiranje.domain.Invoice;
import napredno.programiranje.domain.InvoiceItem;
import napredno.programiranje.domain.InvoiceReceptionMeans;
import napredno.programiranje.domain.InvoiceReceptionType;
import napredno.programiranje.domain.Product;
import napredno.programiranje.tablemodel.InvoiceItemsTableModel;

public class FrmAddInvoice extends JFrame {

	List<InvoiceItem> invoiceItems = new LinkedList<>();
    InvoiceItemsTableModel invoiceItemsTableModel = new InvoiceItemsTableModel(invoiceItems);
    List<InvoiceReceptionMeans> invoiceReceptionMeans = Arrays.asList(InvoiceReceptionMeans.values());
    List<Product> products;
    List<Customer> customers;
    Invoice invoice;
    double total = 0;
    final DateTimeFormatter format = DateTimeFormatter.ofPattern("dd-MM-yyyy");
    InvoiceReceptionType invoiceReceptionType;

    public FrmAddInvoice() {
        initComponents();
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        populateTable();
        fillComboBoxes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtIssueDate = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtVAT = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRebate = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPaymentDeadline = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        cmbProducts = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnAddInvoiceItem = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblInvoiceItems = new javax.swing.JTable();
        btnAddInvoice = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        cmbInvoiceReceptionType = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtTotalValue = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kreiranje fakture");

        jLabel1.setText("Kupac:");

        jLabel2.setText("Datum izdavanja:");

        txtIssueDate.setText("format:  dd-mm-gggg");
        txtIssueDate.setToolTipText("format:  dd-mm-gggg");
        txtIssueDate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIssueDateMouseClicked(evt);
            }
        });

        jLabel3.setText("PDV (%):");

        jLabel4.setText("Rabat (%):");

        jLabel5.setText("Valuta (rok) plaćanja:");

        txtPaymentDeadline.setText("format:  dd-mm-gggg");
        txtPaymentDeadline.setToolTipText("format:  dd-mm-gggg");
        txtPaymentDeadline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPaymentDeadlineMouseClicked(evt);
            }
        });
        txtPaymentDeadline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPaymentDeadlineActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dodaj stavku fakture"));

        jLabel6.setText("Proizvod:");

        jLabel7.setText("Količina:");

        jLabel8.setText("Opis:");

        txtDescription.setColumns(20);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        btnAddInvoiceItem.setText("Dodaj stavku");
        btnAddInvoiceItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvoiceItemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btnAddInvoiceItem))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 372, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                            .addGap(47, 47, 47)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cmbProducts, 0, 170, Short.MAX_VALUE)
                                .addComponent(txtQuantity)))))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(btnAddInvoiceItem))
        );

        jLabel9.setText("Stavke fakture:");

        tblInvoiceItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblInvoiceItems);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
        );

        btnAddInvoice.setText("Sačuvaj podatke");
        btnAddInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddInvoiceActionPerformed(evt);
            }
        });

        jLabel10.setText("Tip prijema fakture:");

        jLabel11.setText("Ukupan iznos stavki:");

        txtTotalValue.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbCustomer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtIssueDate, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(txtVAT)
                            .addComponent(txtRebate)
                            .addComponent(txtPaymentDeadline)
                            .addComponent(cmbInvoiceReceptionType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(110, 110, 110)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(115, 115, 115)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGap(31, 31, 31)
                            .addComponent(txtTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAddInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel9))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIssueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtVAT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtRebate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtPaymentDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(cmbInvoiceReceptionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12)
                    .addComponent(txtTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void txtIssueDateMouseClicked(java.awt.event.MouseEvent evt) {                                          
        txtIssueDate.setText("");
    }                                         

    private void txtPaymentDeadlineActionPerformed(java.awt.event.ActionEvent evt) {                                                   
        // TODO add your handling code here:
    }                                                  

    private void btnAddInvoiceItemActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        try {
            String quantity = txtQuantity.getText();
            String description = txtDescription.getText();
            String productCmb = (String)cmbProducts.getSelectedItem();
            
            Product product = null;
            
            for(int i = 0; i < products.size(); i++){
                if(products.get(i).getProductName().equals(productCmb)){
                    product = products.get(i);
                }
            }
            
            validateInvoiceItem(quantity, product);
            
            InvoiceItem invoiceItem = new InvoiceItem();
            invoiceItem.setQuantity(Integer.parseInt(quantity));
            invoiceItem.setDescription(description);
            invoiceItem.setProduct(product);
            invoiceItem.setItemPrice(invoiceItem.getItemPrice());
            
            total += invoiceItem.getItemPrice();
            
            invoiceItems.add(invoiceItem);
            refreshTable();
            
            txtQuantity.setText("");
            txtDescription.setText("");
            txtTotalValue.setText(total + "");
            JOptionPane.showMessageDialog(this, "Stavka je uspešno dodata.", "Uspešno dodavanje", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }                                                 

    private void btnAddInvoiceActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            
            if(invoiceItems.size() == 0){
                JOptionPane.showMessageDialog(this, "Nema dodatih stavki! Unesite stavke fakture.");
                return;
            }
            
            String VAT = txtVAT.getText();
            String rebate = txtRebate.getText();
            String customerCmb = (String)cmbCustomer.getSelectedItem();
            String reception = (String)cmbInvoiceReceptionType.getSelectedItem();
            String date1 = txtIssueDate.getText();
            String date2 = txtPaymentDeadline.getText();
            
            Customer customer = null;
            for(int i = 0; i < customers.size(); i++){
                if(customers.get(i).getCustomerName().equals(customerCmb)){
                    customer = customers.get(i);
                }
            }
            
            validateInvoice(customer, date1, VAT, rebate, date2);
            
            double accBasis = ((100 - Double.parseDouble(rebate))/100) * Double.parseDouble(txtTotalValue.getText());
            BigDecimal total = BigDecimal.valueOf(accBasis * ((Double.parseDouble(VAT) + 100)/100));
            
            invoice = new Invoice();
            invoice.setCustomer(customer);
            invoice.setProcessed(true);
            invoice.setCanceled(false);
            invoice.setIssueDate(LocalDate.parse(date1, format));
            invoice.setPaymentDeadline(LocalDate.parse(date2, format));
            invoice.setVAT(Double.parseDouble(VAT));
            invoice.setRebate(Double.parseDouble(rebate));
            invoice.setAccountingBasis(accBasis);
            invoice.setTotalValue(total);
            
            long invoiceID = Communication.getInstance().addInvoice(invoice);
            invoice.setInvoiceNumber(invoiceID);
            
            invoiceReceptionType = new InvoiceReceptionType();
            invoiceReceptionType.setCustomer(customer);
            invoiceReceptionType.setInvoiceReceptionMeans(reception);
            invoiceReceptionType.setInvoice(invoice);
            
            Response response = Communication.getInstance().addInvoiceReceptionType(invoiceReceptionType);
            
            if(response.getException() != null){
                JOptionPane.showMessageDialog(this, "Sistem nije zapamtio tip prijema fakture");
                return;
            }
            
            for(InvoiceItem item : invoiceItems){
                item.setInvoice(invoice);
                Response response1 = Communication.getInstance().addInvoiceItem(item);
                if(response1.getException() != null){
                JOptionPane.showMessageDialog(this, "Sistem nije zapamtio stavku fakture");
                return;
            }
            }
            
            txtIssueDate.setText("");
            txtPaymentDeadline.setText("");
            txtVAT.setText("");
            txtRebate.setText("");
            txtTotalValue.setText("");
            invoiceItems = new LinkedList<>();
            refreshTable();
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio fakturu.", "Uspešno dodavanje", JOptionPane.INFORMATION_MESSAGE);
        }
        catch (Exception e){
            JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti fakturu.\n" + e.getMessage());
        }
    }                                             

    private void txtPaymentDeadlineMouseClicked(java.awt.event.MouseEvent evt) {                                                
        txtPaymentDeadline.setText("");
    }                                               

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmAddInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmAddInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmAddInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmAddInvoice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmAddInvoice().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAddInvoice;
    private javax.swing.JButton btnAddInvoiceItem;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbInvoiceReceptionType;
    private javax.swing.JComboBox<String> cmbProducts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblInvoiceItems;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtIssueDate;
    private javax.swing.JTextField txtPaymentDeadline;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtRebate;
    private javax.swing.JTextField txtTotalValue;
    private javax.swing.JTextField txtVAT;
    // End of variables declaration                   

    private void populateTable() {
        tblInvoiceItems.setModel(invoiceItemsTableModel);
        tblInvoiceItems.getColumnModel().getColumn(0).setMinWidth(150);
        tblInvoiceItems.getColumnModel().getColumn(3).setMinWidth(150);
        tblInvoiceItems.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void fillComboBoxes() {
        try {
            invoiceReceptionMeans.forEach(mean -> {
                cmbInvoiceReceptionType.addItem(String.valueOf(mean));
            });

            products = Communication.getInstance().getAllProducts();
            products.forEach(product -> {
                cmbProducts.addItem(product.getProductName());
            });

            customers = Communication.getInstance().getAllCustomers();
            customers.forEach(customer -> {
                cmbCustomer.addItem(customer.getCustomerName());
            });

        } catch (Exception ex) {
            Logger.getLogger(FrmAddInvoice.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void validateInvoiceItem(String quantity, Product product) throws Exception {
        String errorMessage = "";

        if (quantity.isEmpty()) {
            errorMessage += "Količina mora biti popunjena!\n";
        }
        
        if(product == null){
            errorMessage += "Greška prilikom izbora proizvoda!\n";
        }
        
        try {
            int quantityInt = Integer.parseInt(quantity);
        } catch (NumberFormatException ex) {
            errorMessage += "Količina mora biti broj!\n";
        }
        if (!errorMessage.isEmpty()) {
            throw new Exception(errorMessage);
        }
    }

    private void validateInvoice(Customer customer, String issueDate, String VAT, String rebate, String paymentDeadline) throws Exception{
        String errorMessage = "";
        
        if(invoiceItems.size() == 0){
            errorMessage += "Nema dodatih stavki!\n";
        }
        if(customer == null){
            errorMessage += "Greška prilikom izbora kupca!\n";
        }
        if (issueDate.isEmpty()) {
            errorMessage += "Datum izdavanja mora biti popunjen!\n";
        }
        if (VAT.isEmpty()) {
            errorMessage += "PDV mora biti popunjen!\n";
        }
        if (rebate.isEmpty()) {
            errorMessage += "Rabat mora biti popunjen!\n";
        }
        if (paymentDeadline.isEmpty()) {
            errorMessage += "Valuta plaćanja mora biti popunjena!\n";
        }
        try {
            double VATdouble = Double.parseDouble(VAT);
            if(VATdouble < 0 || VATdouble > 100){
                errorMessage += "PDV mora biti broj izmedju 0 i 100!\n";
            }
        } catch (NumberFormatException ex) {
            errorMessage += "PDV mora biti broj!\n";
        }
        try {
            double rebateDouble = Double.parseDouble(rebate);
            if(rebateDouble < 0 || rebateDouble > 100){
                errorMessage += "Rabat mora biti broj izmedju 0 i 100!\n";
            }
        } catch (NumberFormatException ex) {
            errorMessage += "Rabat mora biti broj!\n";
        }
        try {
            LocalDate date = LocalDate.parse(issueDate, format);
        } catch (NumberFormatException ex) {
            errorMessage += "Neispravno unet datum izdavanja!\n";
        }
        try {
            LocalDate date = LocalDate.parse(paymentDeadline, format);
        } catch (NumberFormatException ex) {
            errorMessage += "Neispravno uneta valuta plaćanja!\n";
        }
        LocalDate date1 = LocalDate.parse(issueDate, format);
        LocalDate date2 = LocalDate.parse(issueDate, format);
        if(date1.isAfter(date2)){
            errorMessage += "Datum izdavanja mora biti pre valute plaćanja!\n";
        }
        if (!errorMessage.isEmpty()) {
            throw new Exception(errorMessage);
        }
    }
    
    public void refreshTable() {
        invoiceItemsTableModel = new InvoiceItemsTableModel(invoiceItems);
        tblInvoiceItems.setModel(invoiceItemsTableModel);
    }
}
